'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var taquito = require('@taquito/taquito');
var BigNumber = _interopDefault(require('bignumber.js'));

var FEE_FACTOR = 997;
var VETO_PERIOD = 7889229;
var VOTING_PERIOD = 2592000;
var ACCURANCY_MULTIPLIER = 1000000000000000;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

function fromOpOpts(tezValue, opts) {
  if (tezValue === void 0) {
    tezValue = 0;
  }

  if (opts === void 0) {
    opts = {};
  }

  return _extends({
    mutez: true,
    amount: tezValue
  }, opts);
}
function batchify(batch, transfers) {
  for (var _iterator = _createForOfIteratorHelperLoose(transfers), _step; !(_step = _iterator()).done;) {
    var tParams = _step.value;
    batch.withTransfer(tParams);
  }

  return batch;
}
function estimateTransfers(tezos, transfers) {
  return tezos.estimate.batch(transfers.map(function (tParams) {
    return _extends({
      kind: taquito.OpKind.TRANSACTION
    }, tParams);
  }));
}
function toContract(_x, _x2) {
  return _toContract.apply(this, arguments);
}

function _toContract() {
  _toContract = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(tezos, contractOrAddress) {
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", typeof contractOrAddress === "string" ? tezos.contract.at(contractOrAddress) : contractOrAddress);

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _toContract.apply(this, arguments);
}

function toContractAddress(contractOrAddress) {
  return typeof contractOrAddress === "string" ? contractOrAddress : contractOrAddress.address;
}
function isFA2Token(token) {
  return typeof token.id !== "undefined";
}
function isTezAsset(asset) {
  return asset === "tez";
}
function isTokenAsset(asset) {
  return asset !== "tez";
}
function assertNat(val) {
  if (!val.isInteger() || val.isNegative()) {
    throw new Error("Value is not non-negative natural number");
  }
}
var ReadOnlySigner = /*#__PURE__*/function () {
  function ReadOnlySigner(pkh, pk) {
    this.pkh = pkh;
    this.pk = pk;
  }

  var _proto = ReadOnlySigner.prototype;

  _proto.publicKeyHash = /*#__PURE__*/function () {
    var _publicKeyHash = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.pkh);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function publicKeyHash() {
      return _publicKeyHash.apply(this, arguments);
    }

    return publicKeyHash;
  }();

  _proto.publicKey = /*#__PURE__*/function () {
    var _publicKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.pk);

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function publicKey() {
      return _publicKey.apply(this, arguments);
    }

    return publicKey;
  }();

  _proto.secretKey = /*#__PURE__*/function () {
    var _secretKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              throw new Error("Secret key cannot be exposed");

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function secretKey() {
      return _secretKey.apply(this, arguments);
    }

    return secretKey;
  }();

  _proto.sign = /*#__PURE__*/function () {
    var _sign = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              throw new Error("Cannot sign");

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function sign() {
      return _sign.apply(this, arguments);
    }

    return sign;
  }();

  return ReadOnlySigner;
}();

function initializeExchange(dex, tokenValue, tezValue, opts) {
  return dex.methods.initializeExchange(tokenValue).toTransferParams(fromOpOpts(tezValue, opts));
}
function tezToTokenPayment(dex, tezValue, tokenValueMin, receiver, opts) {
  return dex.methods.tezToTokenPayment(tokenValueMin, receiver).toTransferParams(fromOpOpts(tezValue, opts));
}
function tokenToTezPayment(dex, tokenValue, tezValueMin, receiver, opts) {
  return dex.methods.tokenToTezPayment(tokenValue, tezValueMin, receiver).toTransferParams(fromOpOpts(undefined, opts));
}
function withdrawProfit(dex, receiver, opts) {
  return dex.methods.withdrawProfit(receiver).toTransferParams(fromOpOpts(undefined, opts));
}
function investLiquidity(dex, tokenValue, tezValue, opts) {
  return dex.methods.investLiquidity(tokenValue).toTransferParams(fromOpOpts(tezValue, opts));
}
function divestLiquidity(dex, shares, tokenValueMin, tezValueMin, opts) {
  return dex.methods.investLiquidity(tezValueMin, tokenValueMin, shares).toTransferParams(fromOpOpts(undefined, opts));
}
function vote(dex, voter, baker, shares, opts) {
  return dex.methods.vote(baker, shares, voter).toTransferParams(fromOpOpts(undefined, opts));
}
function veto(dex, voter, shares, opts) {
  return dex.methods.veto(shares, voter).toTransferParams(fromOpOpts(undefined, opts));
}

var dex = {
  __proto__: null,
  initializeExchange: initializeExchange,
  tezToTokenPayment: tezToTokenPayment,
  tokenToTezPayment: tokenToTezPayment,
  withdrawProfit: withdrawProfit,
  investLiquidity: investLiquidity,
  divestLiquidity: divestLiquidity,
  vote: vote,
  veto: veto
};

function launchExchange(factory, token, tokenValue, tezValue, opts) {
  var _factory$methods;

  var tokenAddress = toContractAddress(token.contract);
  return (_factory$methods = factory.methods).launchExchange.apply(_factory$methods, (isFA2Token(token) ? [tokenAddress, token.id] : [tokenAddress]).concat([tokenValue])).toTransferParams(fromOpOpts(tezValue, opts));
}

var factory = {
  __proto__: null,
  launchExchange: launchExchange
};

var Errors;

(function (Errors) {
  Errors["NotEnoughBalance"] = "NotEnoughBalance";
  Errors["NotEnoughAllowance"] = "NotEnoughAllowance";
  Errors["UnsafeAllowanceChange"] = "UnsafeAllowanceChange";
})(Errors || (Errors = {}));

function transfer(fa1_2, from, to, value, opts) {
  return fa1_2.methods.transfer(from, to, value).toTransferParams(fromOpOpts(undefined, opts));
}
function approve(fa1_2, spender, value, opts) {
  return fa1_2.methods.approve(spender, value).toTransferParams(fromOpOpts(undefined, opts));
}

var fa1_2 = {
  __proto__: null,
  get Errors () { return Errors; },
  transfer: transfer,
  approve: approve
};

var Errors$1;

(function (Errors) {
  Errors["TokenUndefined"] = "FA2_TOKEN_UNDEFINED";
  Errors["InsufficientBalance"] = "FA2_INSUFFICIENT_BALANCE";
  Errors["TxDenied"] = "FA2_TX_DENIED";
  Errors["NotOwner"] = "FA2_NOT_OWNER";
  Errors["NotOperator"] = "FA2_NOT_OPERATOR";
  Errors["OperatorsUnsupported"] = "FA2_OPERATORS_UNSUPPORTED";
  Errors["ReceiverHookFailed"] = "FA2_RECEIVER_HOOK_FAILED";
  Errors["SenderHookFailed"] = "FA2_SENDER_HOOK_FAILED";
  Errors["ReceiverHookUndefined"] = "FA2_RECEIVER_HOOK_UNDEFINED";
  Errors["SenderHookUndefined"] = "FA2_SENDER_HOOK_UNDEFINED";
})(Errors$1 || (Errors$1 = {}));

function transfer$1(fa2, transfers, opts) {
  return fa2.methods.transfer(optimizeTransfersFrom(transfers).map(function (_ref) {
    var from = _ref[0],
        txs = _ref[1];
    return {
      from_: from,
      txs: txs.map(function (_ref2) {
        var tokenId = _ref2.tokenId,
            to = _ref2.to,
            value = _ref2.value;
        return {
          token_id: tokenId,
          to_: to,
          amount: value
        };
      })
    };
  })).toTransferParams(fromOpOpts(undefined, opts));
}
function updateOperators(fa2, updates, opts) {
  return fa2.methods.update_operators(updates.map(function (_ref3) {
    var _ref4;

    var type = _ref3.type,
        tokenId = _ref3.tokenId,
        from = _ref3.from,
        to = _ref3.to;
    return _ref4 = {}, _ref4[type] = {
      token_id: tokenId,
      owner: from,
      operator: to
    }, _ref4;
  })).toTransferParams(fromOpOpts(undefined, opts));
}

function optimizeTransfersFrom(transfers) {
  var tMap = new Map();

  for (var _iterator = _createForOfIteratorHelperLoose(transfers), _step; !(_step = _iterator()).done;) {
    var _ref6 = _step.value;

    var from = _ref6.from,
        rest = _objectWithoutPropertiesLoose(_ref6, ["from"]);

    if (tMap.has(from)) {
      tMap.get(from).push(rest);
    } else {
      tMap.set(from, [rest]);
    }
  }

  return Array.from(tMap);
}

var fa2 = {
  __proto__: null,
  get Errors () { return Errors$1; },
  transfer: transfer$1,
  updateOperators: updateOperators
};

function estimateTezToToken(dexStorage, tezValue) {
  var tezValueBN = new BigNumber(tezValue);
  assertNat(tezValueBN);
  if (tezValueBN.isZero()) return new BigNumber(0);
  var tezInWithFee = new BigNumber(tezValue).times(FEE_FACTOR);
  var numerator = tezInWithFee.times(dexStorage.storage.token_pool);
  var denominator = new BigNumber(dexStorage.storage.tez_pool).times(1000).plus(tezInWithFee);
  return numerator.idiv(denominator);
}
function estimateTokenToTez(dexStorage, tokenValue) {
  var tokenValueBN = new BigNumber(tokenValue);
  assertNat(tokenValueBN);
  if (tokenValueBN.isZero()) return new BigNumber(0);
  var tokenInWithFee = new BigNumber(tokenValue).times(FEE_FACTOR);
  var numerator = tokenInWithFee.times(dexStorage.storage.tez_pool);
  var denominator = new BigNumber(dexStorage.storage.token_pool).times(1000).plus(tokenInWithFee);
  return numerator.idiv(denominator);
}
function estimateTezToTokenInverse(dexStorage, tokenValue) {
  var tokenValueBN = new BigNumber(tokenValue);
  assertNat(tokenValueBN);
  if (tokenValueBN.isZero()) return new BigNumber(0);
  var numerator = new BigNumber(dexStorage.storage.tez_pool).times(1000).times(tokenValue);
  var denominator = new BigNumber(dexStorage.storage.token_pool).minus(tokenValue).times(FEE_FACTOR);
  return numerator.idiv(denominator).plus(1);
}
function estimateTokenToTezInverse(dexStorage, tezValue) {
  var tezValueBN = new BigNumber(tezValue);
  assertNat(tezValueBN);
  if (tezValueBN.isZero()) return new BigNumber(0);
  var numerator = new BigNumber(dexStorage.storage.token_pool).times(1000).times(tezValue);
  var denominator = new BigNumber(dexStorage.storage.tez_pool).minus(tezValue).times(FEE_FACTOR);
  return numerator.idiv(denominator).plus(1);
}
function estimateSharesInTez(dexStorage, tezValue) {
  var tezValueBN = new BigNumber(tezValue);
  assertNat(tezValueBN);
  if (tezValueBN.isZero()) return new BigNumber(0);
  return tezValueBN.times(dexStorage.storage.total_supply).idiv(dexStorage.storage.tez_pool);
}
function estimateSharesInToken(dexStorage, tokenValue) {
  var tokenValueBN = new BigNumber(tokenValue);
  assertNat(tokenValueBN);
  if (tokenValueBN.isZero()) return new BigNumber(0);
  return tokenValueBN.times(dexStorage.storage.total_supply).idiv(dexStorage.storage.token_pool);
}
function estimateTezInShares(dexStorage, shares) {
  var sharesBN = new BigNumber(shares);
  assertNat(sharesBN);
  if (sharesBN.isZero()) return new BigNumber(0);
  return sharesBN.times(dexStorage.storage.tez_pool).idiv(dexStorage.storage.total_supply);
}
function estimateTokenInShares(dexStorage, shares) {
  var sharesBN = new BigNumber(shares);
  assertNat(sharesBN);
  if (sharesBN.isZero()) return new BigNumber(0);
  return sharesBN.times(dexStorage.storage.token_pool).idiv(dexStorage.storage.total_supply);
}
function estimateTokenInTez(dexStorage, tezValue) {
  var tezValueBN = new BigNumber(tezValue);
  assertNat(tezValueBN);
  if (tezValueBN.isZero()) return new BigNumber(0);
  return tezValueBN.times(dexStorage.storage.token_pool).idiv(dexStorage.storage.tez_pool);
}
function estimateTezInToken(dexStorage, tokenValue) {
  var tokenValueBN = new BigNumber(tokenValue);
  assertNat(tokenValueBN);
  if (tokenValueBN.isZero()) return new BigNumber(0);
  return tokenValueBN.times(dexStorage.storage.tez_pool).idiv(dexStorage.storage.token_pool);
}

function swap(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
  return _swap.apply(this, arguments);
}

function _swap() {
  _swap = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(tezos, factories, fromAsset, toAsset, value, slippageTolerance, toAccount) {
    var fromAccount, dex$1, dexStorage, valueToMin, _dex, _dexStorage, _valueToMin, halfSlippageTolerance, _yield$Promise$all, inputDex, outputDex, _yield$Promise$all2, inputDexStorage, outputDexStorage, intermediateValueToMin, finalValueToMin;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (slippageTolerance === void 0) {
              slippageTolerance = 0;
            }

            _context.next = 3;
            return tezos.signer.publicKeyHash();

          case 3:
            fromAccount = _context.sent;
            if (!toAccount) toAccount = fromAccount;

            if (!(isTezAsset(fromAsset) && isTokenAsset(toAsset))) {
              _context.next = 16;
              break;
            }

            _context.next = 8;
            return findDex(tezos, factories, toAsset);

          case 8:
            dex$1 = _context.sent;
            _context.next = 11;
            return dex$1.storage();

          case 11:
            dexStorage = _context.sent;
            valueToMin = withSlippage(estimateTezToToken(dexStorage, value), slippageTolerance);
            return _context.abrupt("return", [tezToTokenPayment(dex$1, value, valueToMin, toAccount)]);

          case 16:
            if (!(isTokenAsset(fromAsset) && isTezAsset(toAsset))) {
              _context.next = 27;
              break;
            }

            _context.next = 19;
            return findDex(tezos, factories, fromAsset);

          case 19:
            _dex = _context.sent;
            _context.next = 22;
            return _dex.storage();

          case 22:
            _dexStorage = _context.sent;
            _valueToMin = withSlippage(estimateTokenToTez(_dexStorage, value), slippageTolerance);
            return _context.abrupt("return", withTokenApprove(tezos, fromAsset, fromAccount, _dex.address, value, [tokenToTezPayment(_dex, value, _valueToMin, toAccount)]));

          case 27:
            if (!(isTokenAsset(fromAsset) && isTokenAsset(toAsset))) {
              _context.next = 44;
              break;
            }

            halfSlippageTolerance = new BigNumber(1).minus(new BigNumber(1).minus(slippageTolerance).sqrt());
            _context.next = 31;
            return Promise.all([findDex(tezos, factories, fromAsset), findDex(tezos, factories, toAsset)]);

          case 31:
            _yield$Promise$all = _context.sent;
            inputDex = _yield$Promise$all[0];
            outputDex = _yield$Promise$all[1];
            _context.next = 36;
            return Promise.all([inputDex.storage(), outputDex.storage()]);

          case 36:
            _yield$Promise$all2 = _context.sent;
            inputDexStorage = _yield$Promise$all2[0];
            outputDexStorage = _yield$Promise$all2[1];
            intermediateValueToMin = withSlippage(estimateTokenToTez(inputDexStorage, value), halfSlippageTolerance);
            finalValueToMin = withSlippage(estimateTezToToken(outputDexStorage, intermediateValueToMin), halfSlippageTolerance);
            return _context.abrupt("return", withTokenApprove(tezos, fromAsset, fromAccount, inputDex.address, value, [tokenToTezPayment(inputDex, value, intermediateValueToMin, fromAccount), tezToTokenPayment(outputDex, intermediateValueToMin, finalValueToMin, toAccount)]));

          case 44:
            throw new Error("Unsupported exchange way");

          case 45:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _swap.apply(this, arguments);
}

function estimateSwap(_x8, _x9, _x10, _x11, _x12) {
  return _estimateSwap.apply(this, arguments);
}

function _estimateSwap() {
  _estimateSwap = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(tezos, factories, fromAsset, toAsset, values) {
    var dex, dexStorage, _dex2, _dexStorage2, _yield$Promise$all3, inputDex, outputDex, _yield$Promise$all4, inputDexStorage, outputDexStorage, intermediateTezValue, _intermediateTezValue;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(isTezAsset(fromAsset) && isTokenAsset(toAsset))) {
              _context2.next = 10;
              break;
            }

            _context2.next = 3;
            return findDex(tezos, factories, toAsset);

          case 3:
            dex = _context2.sent;
            _context2.next = 6;
            return dex.storage();

          case 6:
            dexStorage = _context2.sent;
            return _context2.abrupt("return", "outputValue" in values ? estimateTezToTokenInverse(dexStorage, values.outputValue) : estimateTezToToken(dexStorage, values.inputValue));

          case 10:
            if (!(isTokenAsset(fromAsset) && isTezAsset(toAsset))) {
              _context2.next = 20;
              break;
            }

            _context2.next = 13;
            return findDex(tezos, factories, fromAsset);

          case 13:
            _dex2 = _context2.sent;
            _context2.next = 16;
            return _dex2.storage();

          case 16:
            _dexStorage2 = _context2.sent;
            return _context2.abrupt("return", "outputValue" in values ? estimateTokenToTezInverse(_dexStorage2, values.outputValue) : estimateTokenToTez(_dexStorage2, values.inputValue));

          case 20:
            if (!(isTokenAsset(fromAsset) && isTokenAsset(toAsset))) {
              _context2.next = 40;
              break;
            }

            _context2.next = 23;
            return Promise.all([findDex(tezos, factories, fromAsset), findDex(tezos, factories, toAsset)]);

          case 23:
            _yield$Promise$all3 = _context2.sent;
            inputDex = _yield$Promise$all3[0];
            outputDex = _yield$Promise$all3[1];
            _context2.next = 28;
            return Promise.all([inputDex.storage(), outputDex.storage()]);

          case 28:
            _yield$Promise$all4 = _context2.sent;
            inputDexStorage = _yield$Promise$all4[0];
            outputDexStorage = _yield$Promise$all4[1];

            if (!("outputValue" in values)) {
              _context2.next = 36;
              break;
            }

            intermediateTezValue = estimateTezToTokenInverse(outputDexStorage, values.outputValue);
            return _context2.abrupt("return", estimateTokenToTezInverse(inputDexStorage, intermediateTezValue));

          case 36:
            _intermediateTezValue = estimateTokenToTez(inputDexStorage, values.inputValue);
            return _context2.abrupt("return", estimateTezToToken(outputDexStorage, _intermediateTezValue));

          case 38:
            _context2.next = 41;
            break;

          case 40:
            throw new Error("Unsupported exchange way");

          case 41:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _estimateSwap.apply(this, arguments);
}

function initializeLiquidity(_x13, _x14, _x15, _x16, _x17) {
  return _initializeLiquidity.apply(this, arguments);
}

function _initializeLiquidity() {
  _initializeLiquidity = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(tezos, factories, token, tokenValue, tezValue) {
    var dex$1, fromAccount, factory$1;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return findDexNonStrict(tezos, factories, token);

          case 2:
            dex$1 = _context3.sent;
            _context3.t0 = dex$1;

            if (!_context3.t0) {
              _context3.next = 8;
              break;
            }

            _context3.next = 7;
            return isDexContainsLiquidity(dex$1);

          case 7:
            _context3.t0 = _context3.sent;

          case 8:
            if (!_context3.t0) {
              _context3.next = 10;
              break;
            }

            throw new DexAlreadyContainsLiquidity();

          case 10:
            _context3.next = 12;
            return tezos.signer.publicKeyHash();

          case 12:
            fromAccount = _context3.sent;

            if (!dex$1) {
              _context3.next = 17;
              break;
            }

            return _context3.abrupt("return", withTokenApprove(tezos, token, fromAccount, dex$1.address, tokenValue, [initializeExchange(dex$1, tokenValue, tezValue)]));

          case 17:
            _context3.next = 19;
            return toContract(tezos, isFA2Token(token) ? factories.fa2Factory : factories.fa1_2Factory);

          case 19:
            factory$1 = _context3.sent;
            return _context3.abrupt("return", withTokenApprove(tezos, token, fromAccount, factory$1.address, tokenValue, [launchExchange(factory$1, token, tokenValue, tezValue)]));

          case 21:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _initializeLiquidity.apply(this, arguments);
}

function addLiquidity(_x18, _x19, _x20) {
  return _addLiquidity.apply(this, arguments);
}

function _addLiquidity() {
  _addLiquidity = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(tezos, dex$1, values) {
    var dexContract, dexStorage, token, tokenValue, tezValue, fromAccount;
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return toContract(tezos, dex$1);

          case 2:
            dexContract = _context4.sent;
            _context4.next = 5;
            return isDexContainsLiquidity(dexContract);

          case 5:
            if (_context4.sent) {
              _context4.next = 7;
              break;
            }

            throw new DexNotContainsLiquidity();

          case 7:
            _context4.next = 9;
            return dexContract.storage();

          case 9:
            dexStorage = _context4.sent;
            token = getDexToken(dexStorage);

            if ("tokenValue" in values && "tezValue" in values) {
              tokenValue = values.tokenValue;
              tezValue = values.tezValue;
            } else if ("tokenValue" in values) {
              tokenValue = values.tokenValue;
              tezValue = estimateTezInToken(dexStorage, tokenValue);
            } else {
              tezValue = values.tezValue;
              tokenValue = estimateTokenInTez(dexStorage, tezValue);
            }

            _context4.next = 14;
            return tezos.signer.publicKeyHash();

          case 14:
            fromAccount = _context4.sent;
            return _context4.abrupt("return", withTokenApprove(tezos, token, fromAccount, dexContract.address, tokenValue, [investLiquidity(dexContract, tokenValue, tezValue), withdrawProfit(dexContract, fromAccount)]));

          case 16:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _addLiquidity.apply(this, arguments);
}

function removeLiquidity(_x21, _x22, _x23, _x24) {
  return _removeLiquidity.apply(this, arguments);
}

function _removeLiquidity() {
  _removeLiquidity = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(tezos, dex$1, lpTokenValue, slippageTolerance) {
    var dexContract, dexStorage, lpToken, tokenValueMin, tezValueMin, fromAccount;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return toContract(tezos, dex$1);

          case 2:
            dexContract = _context5.sent;
            _context5.next = 5;
            return dexContract.storage();

          case 5:
            dexStorage = _context5.sent;
            lpToken = toLPToken(dexContract, dexStorage);
            tokenValueMin = withSlippage(estimateTokenInShares(dexStorage, lpTokenValue), slippageTolerance);
            tezValueMin = withSlippage(estimateTezInShares(dexStorage, lpTokenValue), slippageTolerance);
            _context5.next = 11;
            return tezos.signer.publicKeyHash();

          case 11:
            fromAccount = _context5.sent;
            return _context5.abrupt("return", withTokenApprove(tezos, lpToken, fromAccount, dexContract.address, lpTokenValue, [divestLiquidity(dexContract, lpTokenValue, tokenValueMin, tezValueMin)]));

          case 13:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _removeLiquidity.apply(this, arguments);
}

function getLiquidityShare(_x25, _x26, _x27) {
  return _getLiquidityShare.apply(this, arguments);
}

function _getLiquidityShare() {
  _getLiquidityShare = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(tezos, dex, account) {
    var dexContract, dexStorage, val, unfrozen, frozen;
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return toContract(tezos, dex);

          case 2:
            dexContract = _context6.sent;
            _context6.next = 5;
            return dexContract.storage();

          case 5:
            dexStorage = _context6.sent;
            _context6.next = 8;
            return dexStorage.storage.ledger.get(account);

          case 8:
            val = _context6.sent;

            if (val) {
              _context6.next = 11;
              break;
            }

            return _context6.abrupt("return", {
              unfrozen: new BigNumber(0),
              frozen: new BigNumber(0),
              total: new BigNumber(0)
            });

          case 11:
            unfrozen = new BigNumber(val.balance);
            frozen = new BigNumber(val.frozen_balance);
            return _context6.abrupt("return", {
              unfrozen: unfrozen,
              frozen: frozen,
              total: unfrozen.plus(frozen)
            });

          case 14:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getLiquidityShare.apply(this, arguments);
}

function estimateReward(_x28, _x29, _x30) {
  return _estimateReward.apply(this, arguments);
}

function _estimateReward() {
  _estimateReward = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(tezos, dex, account) {
    var _rewards$reward;

    var dexContract, _yield$dexContract$st, storage, _yield$Promise$all5, rewards, shares, reward, _rewards$reward_paid, now, periodFinish, lastUpdateTime, rewardsTime, newReward, periodsDuration, rewardPerSec, rewardPerShare, totalShares;

    return runtime_1.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return toContract(tezos, dex);

          case 2:
            dexContract = _context7.sent;
            _context7.next = 5;
            return dexContract.storage();

          case 5:
            _yield$dexContract$st = _context7.sent;
            storage = _yield$dexContract$st.storage;
            _context7.next = 9;
            return Promise.all([storage.user_rewards.get(account), storage.ledger.get(account)]);

          case 9:
            _yield$Promise$all5 = _context7.sent;
            rewards = _yield$Promise$all5[0];
            shares = _yield$Promise$all5[1];
            reward = new BigNumber((_rewards$reward = rewards == null ? void 0 : rewards.reward) != null ? _rewards$reward : 0);

            if (shares) {
              now = new Date();
              periodFinish = new Date(storage.period_finish);
              lastUpdateTime = new Date(storage.last_update_time);
              rewardsTime = now > periodFinish ? periodFinish : now;
              newReward = new BigNumber(Math.abs(+rewardsTime - +lastUpdateTime)).idiv(1000).times(storage.reward_per_sec);

              if (now > periodFinish) {
                periodsDuration = new BigNumber(+now - +periodFinish).idiv(1000).idiv(VOTING_PERIOD).plus(1).times(VOTING_PERIOD);
                rewardPerSec = new BigNumber(storage.reward).times(ACCURANCY_MULTIPLIER).idiv(periodsDuration.abs());
                newReward = new BigNumber(+now - +periodFinish).idiv(1000).abs().times(rewardPerSec);
              }

              rewardPerShare = new BigNumber(storage.reward_per_share).plus(newReward.idiv(storage.total_supply));
              totalShares = new BigNumber(shares.balance).plus(shares.frozen_balance);
              reward = reward.plus(totalShares.times(rewardPerShare).minus((_rewards$reward_paid = rewards == null ? void 0 : rewards.reward_paid) != null ? _rewards$reward_paid : 0).abs());
            }

            return _context7.abrupt("return", reward.idiv(ACCURANCY_MULTIPLIER));

          case 15:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _estimateReward.apply(this, arguments);
}

function withdrawReward(_x31, _x32, _x33) {
  return _withdrawReward.apply(this, arguments);
}

function _withdrawReward() {
  _withdrawReward = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(tezos, dex$1, receiver) {
    var dexContract;
    return runtime_1.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return toContract(tezos, dex$1);

          case 2:
            dexContract = _context8.sent;
            return _context8.abrupt("return", [withdrawProfit(dexContract, receiver)]);

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _withdrawReward.apply(this, arguments);
}

function voteForBaker(_x34, _x35, _x36, _x37) {
  return _voteForBaker.apply(this, arguments);
}

function _voteForBaker() {
  _voteForBaker = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(tezos, dex$1, bakerAddress, lpTokenValue) {
    var dexContract, dexStorage, lpToken, fromAccount, voter;
    return runtime_1.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return toContract(tezos, dex$1);

          case 2:
            dexContract = _context9.sent;
            _context9.next = 5;
            return dexContract.storage();

          case 5:
            dexStorage = _context9.sent;
            lpToken = toLPToken(dexContract, dexStorage);
            _context9.next = 9;
            return tezos.signer.publicKeyHash();

          case 9:
            fromAccount = _context9.sent;
            voter = fromAccount;
            return _context9.abrupt("return", withTokenApprove(tezos, lpToken, fromAccount, dexContract.address, lpTokenValue, [vote(dexContract, voter, bakerAddress, lpTokenValue)]));

          case 12:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _voteForBaker.apply(this, arguments);
}

function vetoCurrentBaker(_x38, _x39, _x40) {
  return _vetoCurrentBaker.apply(this, arguments);
}

function _vetoCurrentBaker() {
  _vetoCurrentBaker = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(tezos, dex$1, lpTokenValue) {
    var dexContract, dexStorage, lpToken, fromAccount, voter;
    return runtime_1.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return toContract(tezos, dex$1);

          case 2:
            dexContract = _context10.sent;
            _context10.next = 5;
            return dexContract.storage();

          case 5:
            dexStorage = _context10.sent;
            lpToken = toLPToken(dexContract, dexStorage);
            _context10.next = 9;
            return tezos.signer.publicKeyHash();

          case 9:
            fromAccount = _context10.sent;
            voter = fromAccount;
            return _context10.abrupt("return", withTokenApprove(tezos, lpToken, fromAccount, dexContract.address, lpTokenValue, [veto(dexContract, voter, lpTokenValue)]));

          case 12:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _vetoCurrentBaker.apply(this, arguments);
}

function toLPToken(dex, dexStorage) {
  return {
    contract: dex,
    id: "token_id" in dexStorage.storage ? 0 : undefined
  };
}
function getDexToken(dexStorage) {
  return {
    contract: dexStorage.storage.token_address,
    id: dexStorage.storage.token_id
  };
}
function isDexExistAndContainsLiquidity(_x41, _x42, _x43) {
  return _isDexExistAndContainsLiquidity.apply(this, arguments);
}

function _isDexExistAndContainsLiquidity() {
  _isDexExistAndContainsLiquidity = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(tezos, factories, token) {
    var dex;
    return runtime_1.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return findDexNonStrict(tezos, factories, token);

          case 2:
            dex = _context11.sent;

            if (dex) {
              _context11.next = 5;
              break;
            }

            return _context11.abrupt("return", false);

          case 5:
            return _context11.abrupt("return", isDexContainsLiquidity(dex));

          case 6:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  return _isDexExistAndContainsLiquidity.apply(this, arguments);
}

function isDexContainsLiquidity(_x44) {
  return _isDexContainsLiquidity.apply(this, arguments);
}

function _isDexContainsLiquidity() {
  _isDexContainsLiquidity = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(dex) {
    var dexStorage;
    return runtime_1.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return dex.storage();

          case 2:
            dexStorage = _context12.sent;
            return _context12.abrupt("return", !(new BigNumber(dexStorage.storage.tez_pool).isZero() || new BigNumber(dexStorage.storage.token_pool).isZero()));

          case 4:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _isDexContainsLiquidity.apply(this, arguments);
}

function findDexNonStrict(_x45, _x46, _x47) {
  return _findDexNonStrict.apply(this, arguments);
}

function _findDexNonStrict() {
  _findDexNonStrict = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(tezos, factories, token) {
    return runtime_1.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.prev = 0;
            _context13.next = 3;
            return findDex(tezos, factories, token);

          case 3:
            return _context13.abrupt("return", _context13.sent);

          case 6:
            _context13.prev = 6;
            _context13.t0 = _context13["catch"](0);

            if (!(_context13.t0 instanceof DexNotFoundError)) {
              _context13.next = 10;
              break;
            }

            return _context13.abrupt("return", null);

          case 10:
            throw _context13.t0;

          case 11:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13, null, [[0, 6]]);
  }));
  return _findDexNonStrict.apply(this, arguments);
}

function findDex(_x48, _x49, _x50) {
  return _findDex.apply(this, arguments);
}

function _findDex() {
  _findDex = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(tezos, _ref, token) {
    var fa1_2Factory, fa2Factory, factory, facStorage, tokenAddress, dexAddress;
    return runtime_1.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            fa1_2Factory = _ref.fa1_2Factory, fa2Factory = _ref.fa2Factory;
            _context14.next = 3;
            return toContract(tezos, isFA2Token(token) ? fa2Factory : fa1_2Factory);

          case 3:
            factory = _context14.sent;
            _context14.next = 6;
            return factory.storage();

          case 6:
            facStorage = _context14.sent;
            tokenAddress = toContractAddress(token.contract);
            _context14.next = 10;
            return facStorage.token_to_exchange.get(isFA2Token(token) ? [tokenAddress, token.id] : tokenAddress);

          case 10:
            dexAddress = _context14.sent;

            if (dexAddress) {
              _context14.next = 13;
              break;
            }

            throw new DexNotFoundError();

          case 13:
            return _context14.abrupt("return", tezos.contract.at(dexAddress));

          case 14:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  return _findDex.apply(this, arguments);
}

function withTokenApprove(_x51, _x52, _x53, _x54, _x55, _x56) {
  return _withTokenApprove.apply(this, arguments);
}

function _withTokenApprove() {
  _withTokenApprove = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(tezos, token, from, to, value, transfers) {
    var tokenContract, approveParams, resetApprove;
    return runtime_1.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return toContract(tezos, token.contract);

          case 2:
            tokenContract = _context15.sent;

            if (!isFA2Token(token)) {
              _context15.next = 5;
              break;
            }

            return _context15.abrupt("return", [updateOperators(tokenContract, [{
              type: "add_operator",
              from: from,
              to: to,
              tokenId: token.id
            }])].concat(transfers, [updateOperators(tokenContract, [{
              type: "remove_operator",
              from: from,
              to: to,
              tokenId: token.id
            }])]));

          case 5:
            approveParams = approve(tokenContract, to, value);
            resetApprove = false;
            _context15.prev = 7;
            _context15.next = 10;
            return estimateTransfers(tezos, [approveParams]);

          case 10:
            _context15.next = 15;
            break;

          case 12:
            _context15.prev = 12;
            _context15.t0 = _context15["catch"](7);

            if (isUnsafeAllowanceChangeError(_context15.t0)) {
              resetApprove = true;
            }

          case 15:
            return _context15.abrupt("return", resetApprove ? [approve(tokenContract, to, 0), approveParams].concat(transfers) : [approveParams].concat(transfers));

          case 16:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15, null, [[7, 12]]);
  }));
  return _withTokenApprove.apply(this, arguments);
}

function isUnsafeAllowanceChangeError(err) {
  try {
    var _err$errors;

    return (err == null ? void 0 : err.message) === Errors.UnsafeAllowanceChange || (err == null ? void 0 : (_err$errors = err.errors) == null ? void 0 : _err$errors.some(function (e) {
      var _e$with, _e$with2, _e$with3, _e$with3$args, _e$with3$args$;

      return (e == null ? void 0 : (_e$with = e["with"]) == null ? void 0 : _e$with["int"]) === "23" || (e == null ? void 0 : (_e$with2 = e["with"]) == null ? void 0 : _e$with2.string) === Errors.UnsafeAllowanceChange || (e == null ? void 0 : (_e$with3 = e["with"]) == null ? void 0 : (_e$with3$args = _e$with3.args) == null ? void 0 : (_e$with3$args$ = _e$with3$args[0]) == null ? void 0 : _e$with3$args$.string) === Errors.UnsafeAllowanceChange;
    }));
  } catch (_unused) {
    return false;
  }
}
function withSlippage(val, tolerance) {
  return new BigNumber(val).times(new BigNumber(1).minus(tolerance)).integerValue(BigNumber.ROUND_DOWN);
}
/**
 * Errors
 */

var DexNotFoundError = function DexNotFoundError() {
  this.name = "DexNotFoundError";
  this.message = "Dex contract for token not found";
};
var DexAlreadyContainsLiquidity = function DexAlreadyContainsLiquidity() {
  this.name = "DexAlreadyContainsLiquidity";
  this.message = "Dex already contains liquidity. Use 'addLiquidity'";
};
var DexNotContainsLiquidity = function DexNotContainsLiquidity() {
  this.name = "DexNotContainsLiquidity";
  this.message = "Dex doesn't contains liquidity. Use 'initializeLiquidity'";
};

exports.ACCURANCY_MULTIPLIER = ACCURANCY_MULTIPLIER;
exports.Dex = dex;
exports.DexAlreadyContainsLiquidity = DexAlreadyContainsLiquidity;
exports.DexNotContainsLiquidity = DexNotContainsLiquidity;
exports.DexNotFoundError = DexNotFoundError;
exports.FA1_2 = fa1_2;
exports.FA2 = fa2;
exports.FEE_FACTOR = FEE_FACTOR;
exports.Factory = factory;
exports.ReadOnlySigner = ReadOnlySigner;
exports.VETO_PERIOD = VETO_PERIOD;
exports.VOTING_PERIOD = VOTING_PERIOD;
exports.addLiquidity = addLiquidity;
exports.assertNat = assertNat;
exports.batchify = batchify;
exports.estimateReward = estimateReward;
exports.estimateSharesInTez = estimateSharesInTez;
exports.estimateSharesInToken = estimateSharesInToken;
exports.estimateSwap = estimateSwap;
exports.estimateTezInShares = estimateTezInShares;
exports.estimateTezInToken = estimateTezInToken;
exports.estimateTezToToken = estimateTezToToken;
exports.estimateTezToTokenInverse = estimateTezToTokenInverse;
exports.estimateTokenInShares = estimateTokenInShares;
exports.estimateTokenInTez = estimateTokenInTez;
exports.estimateTokenToTez = estimateTokenToTez;
exports.estimateTokenToTezInverse = estimateTokenToTezInverse;
exports.estimateTransfers = estimateTransfers;
exports.findDex = findDex;
exports.findDexNonStrict = findDexNonStrict;
exports.fromOpOpts = fromOpOpts;
exports.getDexToken = getDexToken;
exports.getLiquidityShare = getLiquidityShare;
exports.initializeLiquidity = initializeLiquidity;
exports.isDexContainsLiquidity = isDexContainsLiquidity;
exports.isDexExistAndContainsLiquidity = isDexExistAndContainsLiquidity;
exports.isFA2Token = isFA2Token;
exports.isTezAsset = isTezAsset;
exports.isTokenAsset = isTokenAsset;
exports.isUnsafeAllowanceChangeError = isUnsafeAllowanceChangeError;
exports.removeLiquidity = removeLiquidity;
exports.swap = swap;
exports.toContract = toContract;
exports.toContractAddress = toContractAddress;
exports.toLPToken = toLPToken;
exports.vetoCurrentBaker = vetoCurrentBaker;
exports.voteForBaker = voteForBaker;
exports.withSlippage = withSlippage;
exports.withTokenApprove = withTokenApprove;
exports.withdrawReward = withdrawReward;
//# sourceMappingURL=sdk.cjs.development.js.map
