import BigNumber from "bignumber.js";
import { TezosToolkit, Signer } from "@taquito/taquito";
import { OperationOptions, Batch, TransferParams, Token, FA2Token, Asset, ContractOrAddress } from "./types";
export declare function fromOpOpts(tezValue?: BigNumber.Value, opts?: OperationOptions): any;
export declare function batchify<B extends Batch>(batch: B, transfers: TransferParams[]): B;
export declare function estimateTransfers(tezos: TezosToolkit, transfers: TransferParams[]): Promise<import("@taquito/taquito/dist/types/contract/estimate").Estimate[]>;
export declare function toContract(tezos: TezosToolkit, contractOrAddress: ContractOrAddress): Promise<import("./types").Contract | import("@taquito/taquito").ContractAbstraction<import("@taquito/taquito").ContractProvider>>;
export declare function toContractAddress(contractOrAddress: ContractOrAddress): string;
export declare function isFA2Token(token: Token): token is FA2Token;
export declare function isTezAsset(asset: Asset): asset is "tez";
export declare function isTokenAsset(asset: Asset): asset is Token;
export declare function assertNat(val: BigNumber): void;
export declare class ReadOnlySigner implements Signer {
    private pkh;
    private pk;
    constructor(pkh: string, pk: string);
    publicKeyHash(): Promise<string>;
    publicKey(): Promise<string>;
    secretKey(): Promise<string>;
    sign(): Promise<{
        bytes: string;
        sig: string;
        prefixSig: string;
        sbytes: string;
    }>;
}
